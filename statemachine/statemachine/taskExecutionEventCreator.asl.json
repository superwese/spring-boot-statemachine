{
  "Comment": "A state machine that retrieves taskexecutions from SDS and sends them to an SNS Topic for further processing",
  "StartAt": "Fill Config",
  "States": {
    "Fill Config": {
      "Type": "Pass",
      "Comment": "Ignored. provide these parameter to start an execution",
      "Result": {
        "tenantUuid": "DEADBEEF-0000-0000-0000-000000000000",
        "startDate": "2016-10-01T00:00:00Z",
        "enddate": "2016-10-01T00:00:00Z",
        "page": 0
      },
      "ResultPath": null,
      "Next": "Restart Config"
    },
    "Restart Config": {
      "Type": "Pass",
      "Result": {
        "maxExecutionCount": 1000,
        "numberOfProcessedTaksExecutions": 0
      },
      "ResultPath": "$.restart",
      "Next": "Get Taskexecutions"
    },
    "Get Taskexecutions": {
      "Comment": "Get's a 'paged' resultset of taskexecution uuids",
      "Type": "Task",
      "Resource": "${GetTaskExecutionsFunctionArn}",
      "ResultPath": "$.taskexecutions",
      "Retry": [ {
        "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException" ],
        "IntervalSeconds": 2,
        "MaxAttempts": 6,
        "BackoffRate": 2
      } ],
      "Next": "Process Messages"
    },
    "Process Messages": {
      "Type": "Map",
      "MaxConcurrency": 100,
      "Next": "Count ProcessedTaksExecutions",
      "InputPath": "$.taskexecutions",
      "ResultPath": "$.iteratorOut",
      "ItemsPath": "$.content",
      "Parameters": {
        "uuid.$": "$$.Map.Item.Value",
        "index.$": "$$.Map.Item.Index"
      },
      "Iterator": {
        "StartAt": "Convert Taskexecution",
        "States": {
          "Convert Taskexecution": {
            "Type": "Task",
            "Comment": "fetches one te from DB, serializes it to an TaskExecutionCreatedEvent DAO, saves it to S3 Bucket(?) and returns the arn/url",
            "Resource": "${ConvertTaskExecutionFunctionArn}",
            "ResultPath": "$.messagePayload",
            "Retry": [ {
              "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException" ],
              "IntervalSeconds": 5,
              "MaxAttempts": 6,
              "BackoffRate": 2
            } ],
            "Catch": [ {
              "ErrorEquals": ["States.ALL"],
              "ResultPath": "$.error-info",
              "Next": "Report Error"
            } ],
            "Next": "Publish message to SNS topic"
          },
          "Publish message to SNS topic": {
            "Comment": "Was immer man tun muss",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
              "MessageAttributes": {
                "TriggeredBy": {
                  "DataType": "String",
                  "StringValue": "statemachine"
                },
                "ExecutionId" : {
                  "DataType": "String",
                  "StringValue.$": "$$.Execution.Id"
                }
              },
              "Subject": "TASK_EXECUTION_IMPORTED",
              "Message.$": "$.messagePayload",
              "TopicArn": "${SNSTopicArn}"
            },
            "Retry": [ {
              "ErrorEquals": [ "States.ALL" ],
              "IntervalSeconds": 5,
              "MaxAttempts": 6,
              "BackoffRate": 2
            } ],
            "Catch": [ {
              "Comment": "TODO: Replace Me with something XXXXXX",
              "ErrorEquals": ["States.ALL"],
              "ResultPath": "$.error-info",
              "Next": "Report Error"
            } ],
            "ResultPath": "$.publishResult",
            "Next": "Report Success"
          },
          "Report Success": {
            "Type": "Task",
            "Resource": "${DDBPutItem}",
            "Parameters": {
              "TableName": "${DDBTable}",
              "Item": {
                "uuid": {
                  "S.$": "$.uuid"
                },
                "status": {
                  "S": "success"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "IntervalSeconds": 20,
                "MaxAttempts": 5,
                "BackoffRate": 10
              }
            ],
            "Next": "One Message Processed",
            "ResultPath": null
          },

          "Report Error": {
            "Type": "Task",
            "Resource": "${DDBPutItem}",
            "Parameters": {
              "TableName": "${DDBTable}",
              "Item": {
                "uuid": {
                  "S.$": "$.uuid"
                },
                "status": {
                  "S": "error"
                },
                "error": {
                  "S.$": "$.error-info.Cause"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "IntervalSeconds": 20,
                "MaxAttempts": 5,
                "BackoffRate": 10
              }
            ],
            "Next": "One Message Processed",
            "ResultPath": null
          },
          "One Message Processed": {
            "Comment": "Bestimmt den output des Iterators",
            "Type": "Pass",
            "InputPath": "$.index",
            "End": true
          }
        }
      }
    },
    "Count ProcessedTaksExecutions": {
      "Type": "Task",
      "Resource": "${IncrementFunctionArn}",
      "InputPath": "$.iteratorOut[-1:]",
      "ResultPath": "$.processedInThisChunk",
      "Next": "Increase ProcessedTaksExecutions"
    },
    "Increase ProcessedTaksExecutions": {
      "Type": "Task",
      "ResultPath": "$.restart.numberOfProcessedTaksExecutions",
      "Parameters": {
        "a.$": "$.processedInThisChunk",
        "b.$": "$.restart.numberOfProcessedTaksExecutions"
      },
      "Resource": "${SumFunctionArn}",
      "Next": "More Taskexecutions?"
    },


    "More Taskexecutions?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.taskexecutions.last",
          "BooleanEquals": true,
          "Next": "Finish"
        }
      ],
      "Default": "Next Taskexecution Page"
    },
    "Next Taskexecution Page": {
      "Type": "Task",
      "Resource": "${IncrementFunctionArn}",
      "InputPath": "$.page",
      "ResultPath": "$.page",
      "Next": "Should Restart?"
    },
    "Should Restart?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.restart.maxExecutionCount",
          "NumericLessThanEqualsPath": "$.restart.numberOfProcessedTaksExecutions",
          "Next": "Restart"
        }
      ],
      "Default": "Get Taskexecutions"
    },
    "Restart": {
      "Type": "Task",
      "Parameters": {
        "StateMachineArn.$": "$$.StateMachine.Id",
        "input.$" : "$"
      },
      "Resource": "${RestartFunctionArn}",
      "Next": "Finish"
    },

    "Finish": {
      "Type": "Succeed"
    }
  }
}
